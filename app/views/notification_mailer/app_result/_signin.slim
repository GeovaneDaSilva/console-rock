table.table.fullwidth
  thead.bg-transparent
    tr
      th Verdict
      th Detected
      th.customer Customer
      th User
      th Location
      th Reputation
      th Result
  tbody
    - similar_detections.each do |app_result|
      tr.align-center
        td = app_result.verdict
        td = l app_result.detection_date, format: :digital
        td.customer = link_to app_result.customer.name, account_triage_url(app_result.customer, query_params.merge(switch_account_id: app_result.customer.id)), target: "_blank", title: "Triage this App for #{app_result.customer.name}"
        - if app_result.details.is_a?(Hash)
          td = app_result.details.dig("user", "principalName") || sanitize("<i>None</i>")
          td = app_result.details.dig("location", "city") || sanitize("<i>None</i>")
          td
            - detections = app_result.details.dig("threat_detail", "detections") || 0
            - 8.times do |i|
              span.stoplight class=("malicious" if i <= (detections - 1))
              | &nbsp;
          td = app_result.details.dig("user", "loginAttempt") || sanitize("<i>None</i>")
        - elsif app_result.details.is_a?(TestResults::BaseJson)
          td = app_result.details.username || sanitize("<i>None</i>")
          td = app_result.details.city_state_country || sanitize("<i>None</i>")
          td
            - detections = app_result.details.detection_count.to_i
            - 8.times do |i|
              span.stoplight class=("malicious" if i <= (detections - 1))
              | &nbsp;
          td = app_result.details.login_attempt || sanitize("<i>None</i>")
        - else
          td -
          td -
          td -
          td -
